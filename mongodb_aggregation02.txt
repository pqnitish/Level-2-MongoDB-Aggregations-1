1Q.Write Mongo query to retrieve the documents from the orders where the customer_id is 1.
ans:db.orders.aggregate([{$match:{customer_id:1}}]);

2Q.Write Mongo query to retrieve documents from the products where supplier_id is 3 .
ans:db.products.aggregate([{$match:{supplier_id:3}}]);

3Q.Write Mongo query to retrieve the documents from the orders collection with "status": "shipped" 
ans:db.orders.aggregate([{$match:{status:"shipped"}}]);

4Q.Write Mongo query to retrieve the amount and paymentMethod from payments where the paymentMethod is not UPI.
ans: db.payments.aggregate([{$match:{$ne:"UPI"}},{$project:{_id:0,amount:1,paymentMethod:1}}]);

5Q.Write Mongo query to retrieve the paymentstatus where the amount is greater than 100.
ans:db.payments.aggregate([{$match:{amount:{$gt:100}}},{$project:{paymentstatus:1,_id:0,}}]);

6Q.Write Mongo query to retrieve the shipper_id and price from the order_details where the price is greater than 2000.
ans:db.order_details.aggregate([{$match:{price:{$gt:2000}}},{$project:{_id:0,shipper_id:1,price:1}}]);

7Q.Write Mongo query to retrieve the customer_id and _id from the orders where the status is not shipped.
ans:db.orders.aggregate([{$match:{status:{$ne:"shipped"}}},{$project:{_id:1,customer_id:1}}]);

8Q.Write Mongo query to retrieve documents from the products where category_id is 1 with out product _id.
ans:db.products.aggregate([{$match:{category_id:1}},{$project:{_id:0,name:1,category_id:1,price:1,quantity:1,shipper_id:1}}]);

9Q.Write Mongo query to retrieve name,quantity from the products where price greater than 1500.
ans:db.products.aggregate([{$match:{price:{$gt:1500}}},{$project:{_id:0,name:1,quantity:1}}]);

10Q.Write Mongo query to retrieve the name from the shippers where the phone number is 1-800-742-5877.
ans:db.shippers.aggregate([{$match:{phone:"1-800-742-5877"}},{$project:{name:1,_id:0}}]);

11Q.Write Mongo query to retrieve the city and phone of the suppliers where the suppliers name is Sony.
ans:db.suppliers.aggregate([{$match:{name:"Sony"}},{$project:{city:1,phone:1,_id:0}}]);

12Q.Write Mongo query to retrieve the name of the suppliers where the city is Tokyo.
ans:db.suppliers.aggregate([{$match:{city:"Tokyo"}},{$project:{name:1,_id:0}}]);

13Q.Write Mongo query to find amount of payment made through "UPI" ?
ans:db.payments.aggregate([{$match:{paymentMethod:"UPI"}},{$group:{_id:null,totalAmount:{$sum:"$amount"}}},{$project:{_id:0,totalAmount:1}}]);

14Q.Write Mongo query to find buyers city as key name "city" who uses hotmail ?
ans:db.buyers.aggregate([{$match:{email:./hotmail\.com$}},{$project:{city:"$address.city",_id:0}}])
15Q.Use MongoDB aggregation to retrieve the top 5 most recent orders that have been shipped, projecting the order date, status, and total amount.
ans:db.orders.aggregate([{$match:{status:"shipped"}},{$sort:{order_data: -1}},{$limit:5},{$project:{_id:0,order_data:1,status:1,total:1}}]);

16Q.Aggregate the first 3 payments with a "success" status, projecting the payment date, amount, and method.
ans:db.payments.aggregate([{$match:{paymentstatus:"success"}},{$sort:{payment_date:1}},{$limit:3},{$project:{payment_date:1,amount:1,paymentMethod:1,_id:0}}])

17Q.Aggregate all pending orders, sort them by the order date in descending order, and project the customer ID, order date, and total amount.
ans:db.orders.aggregate([{$match:{status:"pending"}},{$sort:{order_date:-1}},{$project:{customer_id:1,order_date:1,total:1,_id:0}}]);

18Q.Aggregate products, sort them by quantity in descending order, limit the result to the top 10 items, and project the product name and quantity.
ans:db.products.aggregate([{$sort:{quantity:-1}},{$limit:10},{$project:{_id:0,name:1,quantity:1}}]);
